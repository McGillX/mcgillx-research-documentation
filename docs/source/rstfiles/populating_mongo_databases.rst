Populating Mongo Database
=========================

McGillX Database Outline
------------------------

All data packages except the tracking logs are course specific as provided by edX.

Each McGillX course has one database with the following collections to store each dataset delivered by edX.

Course Specific Database Structure
-----------------------------------

+-------------------+-----------------+ 
| Raw Data Packages | Collection Name | 
+===================+=================+
|{org}-{course}-{date}-auth_user-{site}-analytics.sql| user |
+------------+------------+-----------+ 
|{org}-{course}-{date}-auth_userprofile-{site}-analytics.sql| userprofile |
+------------+------------+-----------+ 
|{org}-{course}-{date}-certificates_generatedcertificate-{site}-analytics.sql| certificates |
+------------+------------+-----------+ 
|{org}-{course}-{date}-courseware_studentmodule-{site}-analytics.sql| courseware_studentmodule |
+------------+------------+-----------+ 
| {org}-email_opt_in-{site}-analytics.csv   | NOT IN USE |
+------------+------------+-----------+ 
| {org}-{course}-{date}-student_courseenrollment-{site}-analytics.sql    | enrollment |
+------------+------------+-----------+ 
| {org}-{course}-{date}-user_api_usercoursetag-{site}-analytics.sql | NOT IN USE |
+------------+------------+-----------+ 
| {org}-{course}-{date}-user_id_map-{site}-analytics.sql    | user_id_map |
+------------+------------+-----------+ 
| {org}-{course}-{date}-{site}.mongo     | forum |
+------------+------------+-----------+ 
| {org}-{course}-{date}-wiki_article-{site}-analytics.sql     | NOT IN USE |
+------------+------------+-----------+ 
| {org}-{course}-{date}-wiki_articlerevision-{site}-analytics.sql     | NOT IN USE |
+------------+------------+-----------+ 
| {org}-{course}-{date}-course_structure-{site}-analytics.json     | course_structure |
+------------+------------+-----------+ 
| Tracking Logs     | tracking |
+------------+------------+-----------+

{site} always appears as "prod" for files generated by edX

.. warning::

    Please use the collection names outlined above to avoid import and report generation issues.


Populating A Course Database
----------------------------

There are two components to populating the course specific databases:

1. For the Mongo and SQL files listed above the files are directly imported into each course's database
2. The tracking logs are first imported into a Master Database and then extracted for course specific databases 

Creation of Course Specific Database (excluding tracking logs)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

JSON, Mongo and SQL files are directly imported into each course's database

1. Parse the Course Structure - [parsing/course_structure](parsing/course_structure)
 1. Run mongod
 2. Run [course_structure_to_mongod.py](parsing/course_structure/course_structure_to_mongod.py)
 
   ```
   python course_structure_to_mongod.py <database_name> course_structure* <path_to_json_file>
   ```
    .. important::
        
        Use "course_structure" as the collection name
    
    
2. Parse the [Discussion Forum Data](http://edx.readthedocs.org/projects/devdata/en/latest/internal_data_formats/discussion_data.html)
 1. Run mongod
 2. Run to following command from the console:

:code: mongoimport --db <database_name> --collection <collection_name*> --file path_to_file

   

3. Parse the [Student Info and Progress Data](http://edx.readthedocs.org/projects/devdata/en/latest/internal_data_formats/sql_schema.html) - [parsing/sql](parsing/sql)
 1. Run mongod
 2. Run to following commands from the console:

:code: mongoimport -d <database_name> -c <collection_name*> --type tsv --file <path_to_file>

    .. important:: 
    
        Use the collection names outlined below to avoid issues

Enter the appropriate SQL file names

   .. code-block::
   
       mongoimport -d <database_name> -c auth_userprofile --type tsv --file {org}-{course}-{date}-auth_userprofile-prod-analytics.sql --headerline

       mongoimport -d <database_name> -c certificates_generatedcertificate --type tsv --file {org}-{course}-{date}-certificates_generatedcertificate-prod-analytics.sql --headerline

       mongoimport -d <database_name> -c student_courseenrollment --type tsv --file {org}-{course}-{date}-student_courseenrollment-prod-analytics.sql --headerline

       mongoimport -d <database_name> -c auth_user --type tsv --file {org}-{course}-{date}-auth_user-prod-analytics.sql --headerline

       mongoimport -d <database_name> -c courseware_studentmodule --type tsv --file {org}-{course}-{date}-courseware_studentmodule-prod-analytics.sql --headerline

       mongoimport -d <database_name> -c user_id_map --type tsv --file {org}-{course}-{date}-user_id_map-prod-analytics.sql --headerline






Master Database for Tracking Logs
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- Tracking log data provided by edX is logged on a daily basis. The log files are not course specific.
- All tracking logs are stored in the Master database.
- Course specifc tracking logs are extracted and stored in a course specific database. 

Master Database structure:

- Database name: tracking_logs
- Collection: tracking

Migrate tracking logs to Master Database - [parsing/tracking_logs](parsing/tracking_logs)
 1. Run mongod
 2. Run [load_tracking_logs_to_mongo.py](parsing/tracking_logs/load_tracking_logs_to_mongo.py)
 
   ```
   python load_tracking_logs_to_mongo.py <database_name> <collection_name> <path_to_directory_containing_trackings_logs>
   ```
    Use tracking as both the database and collection name
    
   A second collection called {collection_name}_imported is automatically generated to keep track of what files were successfully imported and errors that occured
   
   **_Errors:_** {org}-edx-events-{date}.log.gz-errors files are generated when documents are not successfully loaded to the database
  - Some events associated with openassessments generate errors. We are working to resolve the issue.
 
####iii. Course Specific Collection for Tracking Logs

Course specific tracking log data is filtered by course ID as well as course enrollment start date and course end date.

This process creates a new collection that will contain tracking logs of given course along with extracts from the course_structure collection.

**_Note_**
- Before extracting the tracking logs of a course make sure the course structure data has been migrated to the course specific database. 
- A subset of the course structure data is appended to the corresponding record in the tracking log. 
Ensure the course_structure data for the given course has been migrated to its own collection in the course database. 
- The data is provided in json format and can be migrated using the script parsing/course_structure/course_structure_to_mongod.py

Generate course specific tracking log collections - [parsing/tracking_logs](parsing/tracking_logs) 

1. Setup [template_config.json](/parsing/tracking_logs/course_config/template_config.json)
 - Create a config file for each course using the template 
 - The config file will be used to extract course specific tracking logs between the specified course start of enrollment date and end of course date
   ```
{
    
    "edx_id" : "",
    "edx_course_name" : "",
    "course_ids" : ["", ""],
    "date_of_course_enrollment" : "YYYY-MM-DD",
    "date_of_course_completion" : "YYYY-MM-DD"

}
   ```
 - A single course may have multiple course ID's associated with its events. Search the main tracking collection for potential course ID's. From the mongo shell execute the following for a print out of the course ID's:
   `db.tracking.distinct('course_id')`
2. Run [generate_course_tracking_logs.py](/parsing/tracking_logs/generate_course_tracking_logs.py) 
   ```
python generate_course_tracking_logs.py <source_db> <source_collection> <destination_db> <destination_collection> <path_to_config_file>
   ```

